---
title: "Toy Bayesian Data Assimilation"
seq(1,10,1)
nn = 2**seq(1,10,1)
mc_curve = 1/sqrt(nn)
dim = 2
qmc_curve = log(nn)**dim / nn
plot(nn, mc_curve, log="xy")
nn = 2**seq(1,10,1)
mc_curve = 1/sqrt(nn)
dim = 2
qmc_curve = log(nn)**dim / nn
plot(nn, mc_curve, log="xy",type="b",col="blue")
plot(nn, qmc_curve, log="xy",type="b",col="blue")
nn = 2**seq(1,10,1)
mc_curve = 1/sqrt(nn)
dim = 2
qmc_curve = log(nn)**dim / nn
plot(nn, mc_curve, log="xy",type="b",col="blue")
points(nn, qmc_curve, log="xy",type="b",col="red")
points(nn, qmc_curve,type="b",col="red")
nn = 2**seq(1,10,1)
mc_curve = 1/sqrt(nn)
dim = 2
qmc_curve = log(nn)**dim / nn
plot(nn, mc_curve, log="xy",type="b",col="blue")
points(nn, qmc_curve,type="b",col="red")
library(ggplot2)
# Create the data
nn <- 2^seq(1, 10, 1)
mc_curve <- 1/sqrt(nn)
# Create a data frame with all dimensions
dims <- c(2, 5, 10, 100)
data <- data.frame(n = rep(nn, times = length(dims) + 1),
value = c(mc_curve, unlist(lapply(dims, function(d) (log(nn)^d)/nn))),
type = rep(c("MC", paste0("QMC (dim=", dims, ")")),
each = length(nn)))
# Plot using ggplot2
ggplot(data, aes(x = n, y = value, color = type, linetype = type)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n", y = "Error",
title = "Comparison of MC and QMC Convergence Rates",
color = "Method", linetype = "Method") +
theme_minimal() +
scale_color_manual(values = c("blue", "red", "green", "purple", "orange")) +
scale_linetype_manual(values = c("solid", "dashed", "dotted", "dotdash", "longdash"))
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 2^seq(1, 10, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10, 50)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 2^seq(1, 10, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10, 20)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 2^seq(1, 10, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 2^seq(1, 20, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 10^seq(1, 10, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Create base data
nn <- 2^seq(1, 25, 1)
mc_curve <- 1/sqrt(nn)
dims <- c(2, 5, 10)
# Create data frame
plot_data <- data.frame(n = nn, MC = mc_curve) %>%
cbind(sapply(dims, function(d) (log(nn)^d)/nn)) %>%
setNames(c("n", "MC", paste0("QMC_dim", dims))) %>%
pivot_longer(-n, names_to = "Method", values_to = "Value")
# Plot with ggplot using default colors
ggplot(plot_data, aes(x = n, y = Value, color = Method)) +
geom_line() +
geom_point() +
scale_x_log10() +
scale_y_log10() +
labs(x = "n (log scale)", y = "Error (log scale)",
title = "MC vs QMC Convergence Rates for Different Dimensions",
color = "Method") +
theme_minimal()
[asdf](./mvtnorm_diag_mse_d4.png)
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)
library(viridisLite)
library(igraph)
#### LOAD DATA
months = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
months_abbrv = c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")
years = seq(2004, 2022)
year = years[1]
data = readr::read_delim(paste("./HadISST1_SST_", as.character(year),".txt",sep=""), delim = "\t")
## Approximate Sampling
